export const runtime = 'edge';

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';

export async function POST(req: Request) {
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Max-Age': '86400',
      },
    });
  }

  if (!DEEPSEEK_API_KEY) {
    return new Response(JSON.stringify({ error: 'API key is not configured' }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  }

  try {
    const { messages } = await req.json();

    if (!messages || !Array.isArray(messages)) {
      return new Response(JSON.stringify({ error: 'Invalid messages format' }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    const enhancedMessages = [
      {
        role: 'system',
        content: `‰Ω†ÊòØ‰∏Ä‰ΩçÂú®Â∞èÁ∫¢‰π¶Ê∑±ËÄïÂ§öÂπ¥ÁöÑÂÜÖÂÆπÂàõ‰ΩúËÄÖÔºåÊìÖÈïøÂÜô‰ΩúÂê∏Âºï‰∫∫ÁöÑÁîüÊ¥ªÂàÜ‰∫´Á¨îËÆ∞„ÄÇËØ∑Ê†πÊçÆÁî®Êà∑ËæìÂÖ•ÁöÑ‰∏ªÈ¢òÔºåÂàõ‰Ωú‰∏ÄÁØáÁúüËØöËá™ÁÑ∂ÁöÑÂ∞èÁ∫¢‰π¶Á¨îËÆ∞„ÄÇ

Âàõ‰ΩúÊ†ºÂºèÔºö
1. Ê†áÈ¢òË¶ÅÊ±ÇÔºö
   - Âü∫‰∫éÁî®Êà∑‰∏ªÈ¢òÔºåÂàõ‰ΩúÂØåÊúâÂê∏ÂºïÂäõÁöÑÊ†áÈ¢ò
   - Ê†áÈ¢òÊéßÂà∂Âú®20Â≠óÁ¨¶‰ª•ÂÜÖ(ÂåÖÂê´emoji)
   - Ëá™ÁÑ∂ËûçÂÖ•1-2‰∏™emojiÔºåÂèØÊîæÂú®ÂºÄÂ§¥ÊàñÁªìÂ∞æ
   - ËøêÁî®ÊÇ¨ÂøµÊÑü„ÄÅÊÑèÂ§ñÊÑüÊàñ‰ª∑ÂÄºÊÑüÊù•Âê∏ÂºïÁÇπÂáª
   - ÂèØ‰ΩøÁî®"ÊàëÊâçÁü•ÈÅì""ÂéüÊù•""Ê≤°ÊÉ≥Âà∞""Â≠¶‰ºöËøô‰∏™""ÂàÜ‰∫´‰∏Ä‰∏™"Á≠âËá™ÁÑ∂Ë°®Ëææ
   - ÈÅøÂÖçÊ†áÈ¢òËøá‰∫éÂ§∏Âº†ÊàñËê•ÈîÄÊÑüÂ§™Âº∫

2. ÂÜÖÂÆπÁªìÊûÑÔºö
   - ÂºÄÁØáË¶ÅÁî®‰∏™‰∫∫ÁªèÂéÜÊàñÊúâË∂£ÂèëÁé∞Âø´ÈÄüÂª∫Á´ãÂÖ±È∏£
   - ÂàÜ3‰∏™Ê†∏ÂøÉÁÇπÂ±ïÂºÄÔºåÊØè‰∏™ÈáçÁÇπÊ†ºÂºèÔºö
     *emoji(üîçüí°‚ú®üìåüí´üåüüíéüéØ‚≠êÔ∏èüîÜ) + ÁÆÄÁü≠ÁöÑÈáçÁÇπÊèèËø∞
     * Á§∫‰æãÔºö
       "‚ú® ÈÄâÂØπÊó∂Èó¥ÂæàÈáçË¶Å"
       "üí° ËøôÊ†∑ÂÅöÊõ¥ÊúâÊïà"
     * ÊØè‰∏™ÈáçÁÇπË¶ÅÊúâÂÖ∑‰ΩìÁöÑÊìç‰ΩúÂª∫ËÆÆ
   - ÂÜô‰ΩúÈ£éÊ†ºÔºö
     * ÂÉèË∑üÊúãÂèãËÅäÂ§©Ëà¨Ëá™ÁÑ∂ÊµÅÁïÖ
     * Áî®ÁîüÊ¥ªÂåñÁöÑËØ≠Ë®ÄÊèèËø∞
     * ÈÄÇÂ∫¶ÂàÜ‰∫´‰∏™‰∫∫‰Ωì‰ºöÂíåÂ∞èÂª∫ËÆÆ
     * ‰øùÊåÅÁúüËØö‰ΩÜ‰∏ì‰∏öÁöÑËØ≠Ê∞î

Êï¥‰ΩìË¶ÅÊ±ÇÔºö
- ÂÜÖÂÆπÊéßÂà∂Âú®200Â≠ó‰ª•ÂÜÖ
- Ê≥®ÈáçÂÆûÁî®ÊÄßÂíåÂèØÊìç‰ΩúÊÄß
- ÈÅøÂÖçËøáÂ∫¶Ëê•ÈîÄÊàñËôöÂÅáÂ§∏Â§ß
- ‰ΩøÁî®Â§ß‰ºóÂåñÁöÑË°®ËææÊñπÂºè
- ‰øùÊåÅÂÜÖÂÆπÁöÑËá™ÁÑ∂ËøûË¥ØÊÄß
- ‰∏çË¶Å‰ΩøÁî®ÊòéÊòæÁöÑÊ†áËÆ∞ÊñáÂ≠óÊàñÂ∫èÂè∑`,
      },
      ...messages,
    ];

    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: enhancedMessages,
        temperature: 0.8,
        max_tokens: 2000,
        stream: true,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Deepseek API error:', response.status, errorText);
      throw new Error(`Deepseek API error: ${response.status} - ${errorText}`);
    }

    const transformStream = new TransformStream({
      start(controller) {
        (this as any).buffer = '';
        (this as any).processLine = (line: string) => {
          if (line.trim() === '') return;
          if (line.startsWith('data: ')) {
            const data = line.slice(5).trim();
            if (data === '[DONE]') {
              controller.enqueue(`data: ${JSON.stringify({ done: true })}\n\n`);
              return;
            }

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content || '';
              if (content) {
                controller.enqueue(
                  `data: ${JSON.stringify({
                    content,
                    done: false,
                    isPartial: true,
                  })}\n\n`
                );
              }
            } catch (e) {
              console.error('Parse error:', e, 'Line:', line);
            }
          }
        };
      },

      transform(chunk, controller) {
        try {
          // console.log('[Edge] Processing chunk:', new Date().toISOString(), 'Size:', chunk.length);
          const text = new TextDecoder().decode(chunk);
          // console.log('Raw chunk:', text);

          (this as any).buffer += text;

          const lines = (this as any).buffer.split('\n');

          (this as any).buffer = lines.pop() || '';

          for (const line of lines) {
            (this as any).processLine(line);
          }
        } catch (error) {
          console.error('[Edge] Transform error:', error, new Date().toISOString());
        }
      },

      flush(controller) {
        if ((this as any).buffer) {
          (this as any).processLine((this as any).buffer);
        }
      },
    });

    const stream = response.body?.pipeThrough(transformStream)?.pipeThrough(new TextEncoderStream());

    if (!stream) {
      throw new Error('Failed to create stream');
    }

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache, no-transform',
        Connection: 'keep-alive',
        'X-Accel-Buffering': 'no',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    });
  } catch (error) {
    console.error('[Edge] Generation error:', {
      timestamp: new Date().toISOString(),
      error: error instanceof Error ? error.message : 'Unknown error',
      type: error instanceof Error ? error.name : 'Unknown type',
    });
    return new Response(
      JSON.stringify({
        error: 'ÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
        details: error instanceof Error ? error.message : 'Unknown error',
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      }
    );
  }
}
