export const runtime = 'edge'

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'

export async function POST(req: Request) {
  if (!DEEPSEEK_API_KEY) {
    return new Response(
      JSON.stringify({ error: 'API key is not configured' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }

  try {
    const { originalText, title, keywords, style, additionalInfo } = await req.json()

    if (!originalText || !title || !keywords) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters' }),
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

    // ‰øùÊåÅÂéüÊúâÁöÑÊ∂àÊÅØÁªìÊûÑ
    const messages = [
      {
        role: 'system',
        content: `‰Ω†ÊòØ‰∏Ä‰ΩçÊìÖÈïøÁÆÄÊ¥ÅË°®ËææÁöÑÂ∞èÁ∫¢‰π¶Âàõ‰ΩúËÄÖ„ÄÇËØ∑Âàõ‰Ωú‰∏ÄÁØáÁ≤æÁÇºÁöÑÂàÜ‰∫´ÔºåÊÄªÂ≠óÊï∞‰∏•Ê†ºÊéßÂà∂Âú®250Â≠ó‰ª•ÂÜÖ„ÄÇÊ≥®ÊÑèÔºöÁõ¥Êé•ËæìÂá∫ÂÜÖÂÆπÔºå‰∏çË¶ÅÂåÖÂê´‰ªª‰ΩïÊ†áËÆ∞ÊÄßÊñáÂ≠óÔºàÂ¶Ç"Ê†áÈ¢òÔºö"„ÄÅ"Ê≠£ÊñáÔºö"Á≠âÔºâ„ÄÇ

Âàõ‰ΩúËßÑËåÉÔºö
1. È¶ñË°åÔºö
   - 20Â≠óÂÜÖÁöÑÊ†áÈ¢ò
   - Ëá™ÁÑ∂ËûçÂÖ•1-2‰∏™emoji
   - ËøêÁî®‰ª•‰∏ãÂê∏ÂºïÂäõË¶ÅÁ¥†Ôºö
     * ËÆæÁΩÆÊÇ¨ÂøµÔºö"ÊàëÂèëÁé∞..."
     * Á™ÅÂá∫‰ª∑ÂÄºÔºö"ËøôÊ†∑ÂÅö..."
     * ÂàÜ‰∫´ÊÑüÊÇüÔºö"ÂéüÊù•..."

2. Ê≠£ÊñáÔºàÊç¢Ë°å‰π¶ÂÜôÔºâÔºö
   - Á¨¨‰∏ÄÊÆµÔºà50Â≠óÂÜÖÔºâÔºö‰∏™‰∫∫ÁªèÂéÜÊàñÂèëÁé∞
   - ‰∏≠Èó¥2-3ÊÆµÔºà150Â≠óÂÜÖÔºâÔºö
     * ÊØèÊÆµ‰ª•Ê∏©Âíåemoji(üîçüí°‚ú®üìåüí´üåüüíéüéØ‚≠êÔ∏èüîÜ)ÂºÄÂ§¥
     * ÊØèÊÆµ‰∏Ä‰∏™Ê†∏ÂøÉËßÇÁÇπÂíåÂÖ∑‰ΩìÂª∫ËÆÆ
   - ÊúÄÂêé‰∏ÄÊÆµÔºà30Â≠óÂÜÖÔºâÔºöÁÆÄÁü≠ÊÄªÁªìÊàñ‰∫íÂä®

ÂÜô‰ΩúË¶ÅÊ±ÇÔºö
- ÂÉèÊúãÂèãÈó¥ÂØπËØùËà¨Ëá™ÁÑ∂
- Áî®ÁÆÄÂçïËØçÂè•Ë°®Ëææ‰∏ì‰∏öÂÜÖÂÆπ
- ÈÄöËøáÁªÜËäÇÂ¢ûÂä†ÁúüÂÆûÊÑü
- ‰øùÊåÅÂÜÖÂÆπÁ≤æÁÇº‰ΩÜ‰∏çÂ§±Ê∏©Â∫¶
- ‰∏•Ê†ºÊéßÂà∂ÊÄªÂ≠óÊï∞Âú®250Â≠óÂÜÖ
- ÁªùÂØπ‰∏çËæìÂá∫‰ªª‰ΩïÊ†áËÆ∞ÊÄßÊñáÂ≠ó`,
      },
      {
        role: 'user',
        content: `Âàõ‰ΩúÁ¥†ÊùêÔºö
‰∏ªÈ¢òÔºö${title}
ÂÖ≥ÈîÆËØçÔºö${keywords}
È£éÊ†ºÔºö${style}
${additionalInfo ? `Ë°•ÂÖÖÔºö${additionalInfo}` : ''}

ÂèÇËÄÉÔºö${originalText}

Ë¶ÅÊ±ÇÔºö
1. Áõ¥Êé•ËæìÂá∫ÂÜÖÂÆπÔºå‰∏çË¶Å‰ªª‰ΩïÊ†áËÆ∞ÊñáÂ≠ó
2. Á™ÅÂá∫Ê†∏ÂøÉÂÖ≥ÈîÆËØç
3. ÂÜÖÂÆπÁ≤æÁÇºÊúâ‰ª∑ÂÄº
4. ÈÄÇÂêàÂø´ÈÄüÈòÖËØª
5. ÊÄªÂ≠óÊï∞Èôê200Â≠óÂÜÖ`,
      },
    ]

    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages,
        temperature: 0.75,
        max_tokens: 3000,
        stream: true,
        presence_penalty: 0.4,
        frequency_penalty: 0.4,
        top_p: 0.9,
      }),
    })

    if (!response.ok) {
      throw new Error(`Deepseek API error: ${response.status}`)
    }

    const transformStream = new TransformStream({
      start(controller) {
        (this as any).buffer = '';
        (this as any).processLine = (line: string) => {
          if (line.trim() === '') return;
          if (line.startsWith('data: ')) {
            const data = line.slice(5).trim();
            if (data === '[DONE]') {
              controller.enqueue(`data: ${JSON.stringify({ done: true })}\n\n`);
              return;
            }

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content || '';
              if (content) {
                controller.enqueue(`data: ${JSON.stringify({
                  content,
                  done: false,
                  isPartial: true
                })}\n\n`);
              }
            } catch (e) {
              console.error('Parse error:', e, 'Line:', line);
            }
          }
        };
      },

      transform(chunk, controller) {
        try {
          // console.log('[Edge] Processing chunk:', new Date().toISOString(), 'Size:', chunk.length);
          const text = new TextDecoder().decode(chunk);
          // console.log('Raw chunk:', text);

          (this as any).buffer += text;
          const lines = (this as any).buffer.split('\n');
          (this as any).buffer = lines.pop() || '';

          for (const line of lines) {
            (this as any).processLine(line);
          }
        } catch (error) {
          console.error('[Edge] Transform error:', error, new Date().toISOString());
        }
      },

      flush(controller) {
        if ((this as any).buffer) {
          (this as any).processLine((this as any).buffer);
        }
      }
    });

    const stream = response.body
      ?.pipeThrough(transformStream)
      ?.pipeThrough(new TextEncoderStream());

    if (!stream) {
      throw new Error('Failed to create stream');
    }

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache, no-transform',
        'Connection': 'keep-alive',
        'X-Accel-Buffering': 'no',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    });

  } catch (error) {
    console.error('Generation error:', error)
    return new Response(
      JSON.stringify({
        error: 'ÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}
