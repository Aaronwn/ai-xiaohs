export const runtime = 'edge'

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'

export async function POST(req: Request) {
  if (!DEEPSEEK_API_KEY) {
    return new Response(
      JSON.stringify({ error: 'API key is not configured' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }

  try {
    const { originalText, title, keywords, style, additionalInfo } = await req.json()

    if (!originalText || !title || !keywords) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters' }),
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

    // ‰øùÊåÅÂéüÊúâÁöÑÊ∂àÊÅØÁªìÊûÑ
    const messages = [
      {
        role: 'system',
        content: `‰Ωú‰∏∫Â∞èÁ∫¢‰π¶ÁàÜÊ¨æÂÜôÊâãÔºåËØ∑Âàõ‰Ωú‰∏ÄÁØáË∂ÖÂê∏ÂºïÁöÑÂπ≤Ë¥ßÁ¨îËÆ∞ÔºÅ

Âàõ‰ΩúÊ†ºÂºèÔºö
1. Ê†áÈ¢òË¶ÅÊ±ÇÔºö
   - Âü∫‰∫éÁî®Êà∑ËæìÂÖ•ÁöÑ‰∏ªÈ¢òÔºåÁîüÊàêÊõ¥Âê∏ÂºïÁúºÁêÉÁöÑÊ†áÈ¢ò
   - Ê†áÈ¢òÂ≠óÊï∞ÊéßÂà∂Âú®20Â≠óÁ¨¶‰ª•ÂÜÖ(ÂåÖÂê´emoji)
   - Ê†áÈ¢òÈúÄÂåÖÂê´1-2‰∏™emojiÔºåÊîæÂú®Ê†áÈ¢òÂºÄÂ§¥ÊàñÁªìÂ∞æ
   - Ê†áÈ¢òË¶ÅÊúâÁàÜÁÇπÔºåÂà∂ÈÄ†Â•ΩÂ•áÂøÉ
   - ÂèØ‰ª•Áî®"Ôºü""ÔºÅ"Á≠âÊ†áÁÇπÂ¢ûÂº∫Ë°®Áé∞Âäõ

2. ÂÜÖÂÆπÁªìÊûÑÔºö
   - ÂºÄÁØáÔºö‰∏ÄÂè•ËØùÂê∏ÂºïÊ≥®ÊÑè
   - ‰∏ª‰ΩìÔºö2-3‰∏™Ê†∏ÂøÉË¶ÅÁÇπ
     * Áî®üí°|‚ú®|üìåÁ≠âemojiÁ™ÅÂá∫ÊØè‰∏™Ë¶ÅÁÇπ
     * Áõ¥Êé•ÂÜôË¶ÅÁÇπÊ†áÈ¢òÔºå‰∏çÁî®Ê†áÂ∫èÂè∑
     * ÊØèÁÇπÂøÖÈ°ªÂèØÊâßË°å
   - ÁªìÂ∞æÔºö‰∏ÄÂè•ÊÄªÁªì+Ë°åÂä®Âè∑Âè¨
   - 3‰∏™#Ê†áÁ≠æ

3. ÂÜô‰ΩúÈ£éÊ†ºÔºö
   - ÂØπËØùÂºèË°®ËææÔºåÂÉèÊúãÂèãÈó¥ÂàÜ‰∫´
   - Â§öÁî®"ÂÆùËóè""Áªù‰∫Ü""Êî∂ËóèÂÖàÁÇπËµû"Á≠âÁàÜÊ¨æËØç
   - ÈáçÁÇπÁ™ÅÂá∫ÔºåÂ±ÇÊ¨°ÂàÜÊòé
   - Âπ≤Ë¥ßÂÆûÁî®‰∏∫Áéã`,
      },
      {
        role: 'user',
        content: `ÂèÇÊï∞Ôºö
Ê†áÈ¢òÔºö${title}
ÂÖ≥ÈîÆËØçÔºö${keywords}
È£éÊ†ºÔºö${style}
${additionalInfo ? `Ë°•ÂÖÖÔºö${additionalInfo}` : ''}

ÂèÇËÄÉÔºö${originalText}

Ë¶ÅÊ±ÇÔºö
1. ÂéüÂàõÂÜÖÂÆπÔºå‰∏çÁÖßÊê¨
2. Á™ÅÂá∫ÂÖ≥ÈîÆËØçÈáçÁÇπ
3. Á°Æ‰øùÂπ≤Ë¥ßÂÆûÁî®
4. ÈÄÇÂêàÂ∞èÁ∫¢‰π¶ÊéíÁâà
5. ‰∏çË¶ÅËæìÂá∫"Ê†áÈ¢òÔºö"Âíå"Ê≠£ÊñáÔºö"Á≠âÊ†áËÆ∞ÊñáÂ≠ó`,
      },
    ]

    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages,
        temperature: 0.75,
        max_tokens: 3000,
        stream: true,
        presence_penalty: 0.4,
        frequency_penalty: 0.4,
        top_p: 0.9,
      }),
    })

    if (!response.ok) {
      throw new Error(`Deepseek API error: ${response.status}`)
    }

    const transformStream = new TransformStream({
      start(controller) {
        (this as any).buffer = '';
        (this as any).processLine = (line: string) => {
          if (line.trim() === '') return;
          if (line.startsWith('data: ')) {
            const data = line.slice(5).trim();
            if (data === '[DONE]') {
              controller.enqueue(`data: ${JSON.stringify({ done: true })}\n\n`);
              return;
            }

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content || '';
              if (content) {
                controller.enqueue(`data: ${JSON.stringify({
                  content,
                  done: false,
                  isPartial: true
                })}\n\n`);
              }
            } catch (e) {
              console.error('Parse error:', e, 'Line:', line);
            }
          }
        };
      },

      transform(chunk, controller) {
        try {
          // console.log('[Edge] Processing chunk:', new Date().toISOString(), 'Size:', chunk.length);
          const text = new TextDecoder().decode(chunk);
          // console.log('Raw chunk:', text);

          (this as any).buffer += text;
          const lines = (this as any).buffer.split('\n');
          (this as any).buffer = lines.pop() || '';

          for (const line of lines) {
            (this as any).processLine(line);
          }
        } catch (error) {
          console.error('[Edge] Transform error:', error, new Date().toISOString());
        }
      },

      flush(controller) {
        if ((this as any).buffer) {
          (this as any).processLine((this as any).buffer);
        }
      }
    });

    const stream = response.body
      ?.pipeThrough(transformStream)
      ?.pipeThrough(new TextEncoderStream());

    if (!stream) {
      throw new Error('Failed to create stream');
    }

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache, no-transform',
        'Connection': 'keep-alive',
        'X-Accel-Buffering': 'no',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    });

  } catch (error) {
    console.error('Generation error:', error)
    return new Response(
      JSON.stringify({
        error: 'ÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}
